// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createClientStmt, err = db.PrepareContext(ctx, createClient); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClient: %w", err)
	}
	if q.deleteClientStmt, err = db.PrepareContext(ctx, deleteClient); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClient: %w", err)
	}
	if q.getClientStmt, err = db.PrepareContext(ctx, getClient); err != nil {
		return nil, fmt.Errorf("error preparing query GetClient: %w", err)
	}
	if q.getClientBySlugStmt, err = db.PrepareContext(ctx, getClientBySlug); err != nil {
		return nil, fmt.Errorf("error preparing query GetClientBySlug: %w", err)
	}
	if q.listClientsStmt, err = db.PrepareContext(ctx, listClients); err != nil {
		return nil, fmt.Errorf("error preparing query ListClients: %w", err)
	}
	if q.updateClientStmt, err = db.PrepareContext(ctx, updateClient); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClient: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createClientStmt != nil {
		if cerr := q.createClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClientStmt: %w", cerr)
		}
	}
	if q.deleteClientStmt != nil {
		if cerr := q.deleteClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClientStmt: %w", cerr)
		}
	}
	if q.getClientStmt != nil {
		if cerr := q.getClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientStmt: %w", cerr)
		}
	}
	if q.getClientBySlugStmt != nil {
		if cerr := q.getClientBySlugStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClientBySlugStmt: %w", cerr)
		}
	}
	if q.listClientsStmt != nil {
		if cerr := q.listClientsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClientsStmt: %w", cerr)
		}
	}
	if q.updateClientStmt != nil {
		if cerr := q.updateClientStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClientStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	createClientStmt    *sql.Stmt
	deleteClientStmt    *sql.Stmt
	getClientStmt       *sql.Stmt
	getClientBySlugStmt *sql.Stmt
	listClientsStmt     *sql.Stmt
	updateClientStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		createClientStmt:    q.createClientStmt,
		deleteClientStmt:    q.deleteClientStmt,
		getClientStmt:       q.getClientStmt,
		getClientBySlugStmt: q.getClientBySlugStmt,
		listClientsStmt:     q.listClientsStmt,
		updateClientStmt:    q.updateClientStmt,
	}
}
